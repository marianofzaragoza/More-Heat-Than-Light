* state machine in aalink loop
  > what with about-to-finish and eos??, maybe state machine sets a next video variable that gets picked up
  > sets next midi variable (for about-to-finish)
  > what about network -> begin of loop, receive, end send, so other nodes are always 1 cycle begind on messages
  > sending 
  > gui update end of loop

* tempsender on alice and bob  is sending to slow???/

* cursor over buttons is not being hidden

* gstreamer error handler:
 2024-09-10 10:10:46,533 [CRITICAL] MhGstPlayer: playbinvideo about to finish,  playlist: file:///home/user/media/moreheat/Table00010711_V1-0031.mov [MainThread] (mhgstreamer.py:369) 
ERROR: qtdemux3529 : gst-stream-error-quark: Internal data stream error. (1)
Debug info: ../gst/isomp4/qtdemux.c(6937): gst_qtdemux_loop (): /GstPlayBin3:playbin_video/GstURIDecodeBin3:uridecodebin3/GstURISourceBin:urisourcebin3410/GstParseBin:parsebin3529/GstQTDemux:qtdemux3529:
streaming stopped, reason not-linked (-1)

2024-09-10 12:47:52,587 [CRITICAL] MidiSender: not sending note (same as last): 27last: 27 [MainThread] (midi.py:50) 
2024-09-10 12:47:52,594 [CRITICAL] MhGstPlayer: playbinvideo about to finish,  playlist: file:///home/user/media/moreheat/A004_04290945_C003.mov [MainThread] (mhgstreamer.py:369) 
2024-09-10 12:47:52,596 [CRITICAL] MhGstPlayer: EOS received from <__gi__.GstPlayBin3 object at 0x7f48ce39df40 (GstPlayBin3 at 0x313e110)> [MainThread] (mhgstreamer.py:314) 
2024-09-10 12:47:52,597 [CRITICAL] MhGstPlayer: unknown eos [MainThread] (mhgstreamer.py:326) 
2024-09-10 12:47:52,597 [CRITICAL] MhGstPlayer: EOS received from <__gi__.GstPlayBin3 object at 0x7f48ce39ddc0 (GstPlayBin3 at 0x313e480)> [MainThread] (mhgstreamer.py:314) 
2024-09-10 12:47:52,597 [CRITICAL] MhGstPlayer: unknown eos [MainThread] (mhgstreamer.py:326) 

* mhplay starts too soon when rebooting
 
* midi blocks mainloop???? i think
* disable mouse cursor
* fullscreen desktop background
* fix message receive check of entanglement
* figure out what to do after 1 time entanglement finishes playing

* DONE check if files exist before playing
* DONE convert framerate in conversion pipeline

* DONE video play related to temperature
* DONE multicast protocol
* reliability / boot (proper logo)
* DONE network
* DONE printer carol
  
* logging (temperatures)
* DONE remote control 
* DONE 2 thermometers on 1-wire bus 
* testing with actual videos
* DONE config file
* NOTNEEDED lightbox (only send)
* NOTNEEDED plymouth-reboot splash screen
* NOTNEEDED? fix alpha blend function (so its faster)
* NEEDSTESTING video interruption sync
* use live sync for timing video interruption
  * is the beat count the same on all machines???? check in aalink
  * interruption state machine
    - both nodes timestamp beats (keep track of last 2 beat timestamps)
    - 1 node sends interrupt message (after checking both temperatures) (with a proposal to start playing on beat # (2 beats in future))
    - both nodes start loading video
    - video starts playing on 2nd next full beat (based on message timestamp??) ( so there is always enough time)

* DONE time sync protocol (ntp or ptp)
* DONE sync communnication on ableton live sync
* logfile to recreate the printout (avideo#, bvideo#, atemp, btemp, state )
* DONE triggering scenes in ableton
* logging / graphing temperatures and videos
* DONE weird resolution / aspect ratio
* NOTNEEDED? updaterate temperature in video player
* DONE black bar projector under video ( in gtk?)
* DONE google sheet import
* DONE disable notifications (for example about updates)
* disable unnattended upgrades
* cleanup extra daemons on computers
* sequence numbers in messages (for debugging packet drops)
* quit program properly (quit doesn't work with the async / glib integration)
* FUTURE interrupting by using 3th player / smooth transition on interrupting
* log 
* DONE check and act on states / transitions
* DONE restart player on stuck video

